/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function computeSwapStep(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function getDeltaX(a: number, b: number, c: number, d: number, e: number): void;
export function getDeltaY(a: number, b: number, c: number, d: number, e: number): void;
export function getNextSqrtPriceFromInput(a: number, b: number, c: number, d: number, e: number): void;
export function getNextSqrtPriceFromOutput(a: number, b: number, c: number, d: number, e: number): void;
export function getNextSqrtPriceXUp(a: number, b: number, c: number, d: number, e: number): void;
export function getNextSqrtPriceYDown(a: number, b: number, c: number, d: number, e: number): void;
export function calculateAmountDelta(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function isEnoughAmountToChangePrice(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function calculateMaxLiquidityPerTick(a: number, b: number): void;
export function checkTicks(a: number, b: number, c: number, d: number): void;
export function checkTick(a: number, b: number, c: number): void;
export function calculateMinAmountOut(a: number, b: number, c: number): void;
export function getSecondsPerLiquidityScale(): number;
export function getSecondsPerLiquidityDenominator(): number;
export function toSecondsPerLiquidity(a: number, b: number): number;
export function getTokenAmountScale(): number;
export function getTokenAmountDenominator(): number;
export function toTokenAmount(a: number, b: number): number;
export function newFeeTier(a: number, b: number, c: number): void;
export function getLiquidityScale(): number;
export function getLiquidityDenominator(): number;
export function toLiquidity(a: number, b: number): number;
export function getPercentageScale(): number;
export function getPercentageDenominator(): number;
export function toPercentage(a: number, b: number): number;
export function getSqrtPriceScale(): number;
export function getSqrtPriceDenominator(): number;
export function toSqrtPrice(a: number, b: number): number;
export function getMaxTick(a: number, b: number): void;
export function getMinTick(a: number, b: number): void;
export function getMaxSqrtPrice(a: number, b: number): void;
export function getMinSqrtPrice(a: number, b: number): void;
export function getFixedPointScale(): number;
export function getFixedPointDenominator(): number;
export function toFixedPoint(a: number, b: number): number;
export function getPriceScale(): number;
export function getPriceDenominator(): number;
export function toPrice(a: number, b: number): number;
export function _calculateFee(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number): void;
export function isTokenX(a: number, b: number, c: number): void;
export function isValidTick(a: number, b: number, c: number, d: number): void;
export function getGlobalMaxSqrtPrice(a: number): void;
export function getGlobalMinSqrtPrice(a: number): void;
export function getTickSearchRange(a: number): void;
export function tickToChunk(a: number, b: number, c: number): void;
export function tickToPos(a: number, b: number, c: number): void;
export function getMaxChunk(a: number, b: number): void;
export function getChunkSize(a: number): void;
export function calculateTick(a: number, b: number, c: number): void;
export function getLiquidityByX(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function getLiquidityByY(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function newPoolKey(a: number, b: number, c: number, d: number): void;
export function getFeeGrowthScale(): number;
export function getFeeGrowthDenominator(): number;
export function toFeeGrowth(a: number, b: number): number;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
